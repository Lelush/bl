<?php
namespace console\components;

use yii\db\ActiveRecord;
use yii\db\Exception;
use yii\helpers\VarDumper;
use yii\log\Logger;

class Controller  extends \yii\console\Controller
{
    public $time;
    public $category;

    public function beforeAction($action)
    {
        $this->startProfile();
        $this->category = 'command.'.$this->getUniqueId().".".$action->id;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    public function startProfile()
    {
        $this->time = microtime(true);
    }

    public function endProfile()
    {
        $time = round(microtime(true) - YII_BEGIN_TIME, 2);
        $message = "Done (".$time." s)";

        $this->log($message);
        $this->delimeter();
    }

    public function log($message, $level = Logger::LEVEL_INFO)
    {
        $message = is_string($message) ? $message : VarDumper::dumpAsString($message);
        echo "$message\n";

        \Yii::getLogger()->log($message, $level, $this->category);
    }

    public function profile($message, $level = Logger::LEVEL_INFO)
    {
        $time = round(microtime(true) - $this->time, 2);
        $message = (is_string($message) ? $message : VarDumper::dumpAsString($message))." ($time s)";
        echo "$message\n";
        \Yii::getLogger()->log($message, $level, $this->category);
        $this->startProfile();
    }

    protected function logSaveError(ActiveRecord $model)
    {
        if (defined('DEBUG_BACKTRACE_IGNORE_ARGS')) {
            $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
        } else {
            $backtrace = debug_backtrace();
        }

        if (empty($_SERVER['argv'])) {
            $request = \Yii::$app->request->getUrl();
        } else {
            $request = implode(' ', $_SERVER['argv']);
        }

        $class = get_class($model);
        $data = array(
            "$class save error",
            'attrs' => $model->getAttributes(),
            'errors' => $model->getErrors(),
            'request' => $request,
            'file' => $backtrace[0]['file'],
            'line' => $backtrace[0]['line'],
        );
        self::log($data, Logger::LEVEL_ERROR);
        throw new Exception(reset($data));
    }

    protected function requireSave(ActiveRecord $model)
    {
        if (!$model->save()) {
            $this->logSaveError($model);
        }
    }

    public function delimeter()
    {
        $this->log("====================================================================================================");
    }


}
